{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","useParams","console","log","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","uploadedQuote","match","useRouteMatch","path","exact","to","url","NoQuotesFound"],"mappings":"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","file":"static/js/3.d19cdaf6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3c-m2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form___2LLM\",\"loading\":\"NewCommentForm_loading__ngHGi\",\"control\":\"NewCommentForm_control__197-f\",\"actions\":\"NewCommentForm_actions__2fZua\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__GH0D8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3d-nL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__FTnQw\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport classes from './NewCommentForm.module.css';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment)\n  const {onAddedComment} = props;\n  \n  useEffect(()=>{\n    if(status === 'completed' && !error){\n      onAddedComment()\n    }\n  },[status,error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({commentData:{ text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (<div className='centered'><LoadingSpinner /></div>)}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState , useEffect, useCallback} from 'react';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport { useParams } from 'react-router-dom';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const {sendRequest, status, data:loadedComments, error } = useHttp(getAllComments);\n  const params = useParams();\n  const {quoteId} = params;\n  console.log(loadedComments);\n\n  useEffect( () => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const addedCommentHandler = useCallback(()=>{\n    sendRequest(quoteId)\n  },[sendRequest,quoteId]);\n\n  let comments;\n\n  if(status === 'pending'){\n    \n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>)\n  };\n\n  if(status === 'completed' && loadedComments && loadedComments.length > 0 ){\n    comments = (<CommentsList comments={loadedComments} />);\n  };\n\n  if(status==='completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = (<p className='centered focused'>No comments where added yet</p>);\n  };\n\n  if(status === 'error'){\n    comments = (<p className='centered focused'>{error}</p>);\n  };\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddedComment={addedCommentHandler} quoteId={quoteId} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = (props) => {\r\n\r\n    const {sendRequest, status, data: uploadedQuote, error} = useHttp(getSingleQuote, true);\r\n    const params = useParams();\r\n    const {quoteId} = params;\r\n    const match = useRouteMatch()\r\n    \r\n    useEffect(()=>{\r\n        sendRequest(quoteId)\r\n    },[sendRequest, quoteId]);\r\n\r\n    if(status === 'pending'){\r\n        return(\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    };\r\n    if (status === 'error'){\r\n        return <p>{error}</p>\r\n    };\r\n\r\n    if(status === 'completed' && !uploadedQuote){\r\n        return <NoQuotesFound />\r\n    };\r\n\r\n    return ( \r\n        <Fragment>\r\n            <HighlightedQuote\r\n                text={uploadedQuote.text}\r\n                author={uploadedQuote.author}\r\n            />\r\n            <Route path={`${match.path}`} exact>\r\n             <Link to={`${match.url}/comments`} className='btn--flat'>Comments</Link>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default QuoteDetail;"],"sourceRoot":""}